// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sylar/ns/ns_protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sylar_2fns_2fns_5fprotobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sylar_2fns_2fns_5fprotobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sylar_2fns_2fns_5fprotobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sylar_2fns_2fns_5fprotobuf_2eproto;
namespace sylar {
namespace ns {
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeInfo;
struct NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NotifyMessage;
struct NotifyMessageDefaultTypeInternal;
extern NotifyMessageDefaultTypeInternal _NotifyMessage_default_instance_;
class QueryRequest;
struct QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResponse;
struct QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
class RegisterInfo;
struct RegisterInfoDefaultTypeInternal;
extern RegisterInfoDefaultTypeInternal _RegisterInfo_default_instance_;
class RegisterRequest;
struct RegisterRequestDefaultTypeInternal;
extern RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;
}  // namespace ns
}  // namespace sylar
PROTOBUF_NAMESPACE_OPEN
template<> ::sylar::ns::Node* Arena::CreateMaybeMessage<::sylar::ns::Node>(Arena*);
template<> ::sylar::ns::NodeInfo* Arena::CreateMaybeMessage<::sylar::ns::NodeInfo>(Arena*);
template<> ::sylar::ns::NotifyMessage* Arena::CreateMaybeMessage<::sylar::ns::NotifyMessage>(Arena*);
template<> ::sylar::ns::QueryRequest* Arena::CreateMaybeMessage<::sylar::ns::QueryRequest>(Arena*);
template<> ::sylar::ns::QueryResponse* Arena::CreateMaybeMessage<::sylar::ns::QueryResponse>(Arena*);
template<> ::sylar::ns::RegisterInfo* Arena::CreateMaybeMessage<::sylar::ns::RegisterInfo>(Arena*);
template<> ::sylar::ns::RegisterRequest* Arena::CreateMaybeMessage<::sylar::ns::RegisterRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sylar {
namespace ns {

// ===================================================================

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit PROTOBUF_CONSTEXPR Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Node& from) {
    Node::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // optional string ip = 1;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional uint32 port = 2;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // optional uint32 weight = 3;
  bool has_weight() const;
  private:
  bool _internal_has_weight() const;
  public:
  void clear_weight();
  uint32_t weight() const;
  void set_weight(uint32_t value);
  private:
  uint32_t _internal_weight() const;
  void _internal_set_weight(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sylar.ns.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
    uint32_t port_;
    uint32_t weight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class RegisterInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.RegisterInfo) */ {
 public:
  inline RegisterInfo() : RegisterInfo(nullptr) {}
  ~RegisterInfo() override;
  explicit PROTOBUF_CONSTEXPR RegisterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterInfo(const RegisterInfo& from);
  RegisterInfo(RegisterInfo&& from) noexcept
    : RegisterInfo() {
    *this = ::std::move(from);
  }

  inline RegisterInfo& operator=(const RegisterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterInfo& operator=(RegisterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterInfo* internal_default_instance() {
    return reinterpret_cast<const RegisterInfo*>(
               &_RegisterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterInfo& a, RegisterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterInfo& from) {
    RegisterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.RegisterInfo";
  }
  protected:
  explicit RegisterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdsFieldNumber = 2,
    kDomainFieldNumber = 1,
    kNodeFieldNumber = 3,
  };
  // repeated uint32 cmds = 2;
  int cmds_size() const;
  private:
  int _internal_cmds_size() const;
  public:
  void clear_cmds();
  private:
  uint32_t _internal_cmds(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_cmds() const;
  void _internal_add_cmds(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_cmds();
  public:
  uint32_t cmds(int index) const;
  void set_cmds(int index, uint32_t value);
  void add_cmds(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      cmds() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_cmds();

  // optional string domain = 1;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional .sylar.ns.Node node = 3;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::sylar::ns::Node& node() const;
  PROTOBUF_NODISCARD ::sylar::ns::Node* release_node();
  ::sylar::ns::Node* mutable_node();
  void set_allocated_node(::sylar::ns::Node* node);
  private:
  const ::sylar::ns::Node& _internal_node() const;
  ::sylar::ns::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::sylar::ns::Node* node);
  ::sylar::ns::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:sylar.ns.RegisterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > cmds_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::sylar::ns::Node* node_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class RegisterRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.RegisterRequest) */ {
 public:
  inline RegisterRequest() : RegisterRequest(nullptr) {}
  ~RegisterRequest() override;
  explicit PROTOBUF_CONSTEXPR RegisterRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterRequest(const RegisterRequest& from);
  RegisterRequest(RegisterRequest&& from) noexcept
    : RegisterRequest() {
    *this = ::std::move(from);
  }

  inline RegisterRequest& operator=(const RegisterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRequest& operator=(RegisterRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterRequest* internal_default_instance() {
    return reinterpret_cast<const RegisterRequest*>(
               &_RegisterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegisterRequest& a, RegisterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterRequest& from) {
    RegisterRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.RegisterRequest";
  }
  protected:
  explicit RegisterRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .sylar.ns.RegisterInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::sylar::ns::RegisterInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::RegisterInfo >*
      mutable_infos();
  private:
  const ::sylar::ns::RegisterInfo& _internal_infos(int index) const;
  ::sylar::ns::RegisterInfo* _internal_add_infos();
  public:
  const ::sylar::ns::RegisterInfo& infos(int index) const;
  ::sylar::ns::RegisterInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::RegisterInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:sylar.ns.RegisterRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::RegisterInfo > infos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class QueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.QueryRequest) */ {
 public:
  inline QueryRequest() : QueryRequest(nullptr) {}
  ~QueryRequest() override;
  explicit PROTOBUF_CONSTEXPR QueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryRequest(const QueryRequest& from);
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryRequest& from) {
    QueryRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.QueryRequest";
  }
  protected:
  explicit QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainsFieldNumber = 1,
  };
  // repeated string domains = 1;
  int domains_size() const;
  private:
  int _internal_domains_size() const;
  public:
  void clear_domains();
  const std::string& domains(int index) const;
  std::string* mutable_domains(int index);
  void set_domains(int index, const std::string& value);
  void set_domains(int index, std::string&& value);
  void set_domains(int index, const char* value);
  void set_domains(int index, const char* value, size_t size);
  std::string* add_domains();
  void add_domains(const std::string& value);
  void add_domains(std::string&& value);
  void add_domains(const char* value);
  void add_domains(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& domains() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_domains();
  private:
  const std::string& _internal_domains(int index) const;
  std::string* _internal_add_domains();
  public:

  // @@protoc_insertion_point(class_scope:sylar.ns.QueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> domains_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.NodeInfo) */ {
 public:
  inline NodeInfo() : NodeInfo(nullptr) {}
  ~NodeInfo() override;
  explicit PROTOBUF_CONSTEXPR NodeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NodeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NodeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NodeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NodeInfo& from) {
    NodeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.NodeInfo";
  }
  protected:
  explicit NodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 3,
    kDomainFieldNumber = 1,
    kCmdFieldNumber = 2,
  };
  // repeated .sylar.ns.Node nodes = 3;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::sylar::ns::Node* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::Node >*
      mutable_nodes();
  private:
  const ::sylar::ns::Node& _internal_nodes(int index) const;
  ::sylar::ns::Node* _internal_add_nodes();
  public:
  const ::sylar::ns::Node& nodes(int index) const;
  ::sylar::ns::Node* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::Node >&
      nodes() const;

  // optional string domain = 1;
  bool has_domain() const;
  private:
  bool _internal_has_domain() const;
  public:
  void clear_domain();
  const std::string& domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* domain);
  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(const std::string& value);
  std::string* _internal_mutable_domain();
  public:

  // optional uint32 cmd = 2;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  uint32_t cmd() const;
  void set_cmd(uint32_t value);
  private:
  uint32_t _internal_cmd() const;
  void _internal_set_cmd(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sylar.ns.NodeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::Node > nodes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    uint32_t cmd_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class QueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.QueryResponse) */ {
 public:
  inline QueryResponse() : QueryResponse(nullptr) {}
  ~QueryResponse() override;
  explicit PROTOBUF_CONSTEXPR QueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryResponse(const QueryResponse& from);
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueryResponse& from) {
    QueryResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.QueryResponse";
  }
  protected:
  explicit QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 1,
  };
  // repeated .sylar.ns.NodeInfo infos = 1;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::sylar::ns::NodeInfo* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
      mutable_infos();
  private:
  const ::sylar::ns::NodeInfo& _internal_infos(int index) const;
  ::sylar::ns::NodeInfo* _internal_add_infos();
  public:
  const ::sylar::ns::NodeInfo& infos(int index) const;
  ::sylar::ns::NodeInfo* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
      infos() const;

  // @@protoc_insertion_point(class_scope:sylar.ns.QueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo > infos_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// -------------------------------------------------------------------

class NotifyMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sylar.ns.NotifyMessage) */ {
 public:
  inline NotifyMessage() : NotifyMessage(nullptr) {}
  ~NotifyMessage() override;
  explicit PROTOBUF_CONSTEXPR NotifyMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyMessage(const NotifyMessage& from);
  NotifyMessage(NotifyMessage&& from) noexcept
    : NotifyMessage() {
    *this = ::std::move(from);
  }

  inline NotifyMessage& operator=(const NotifyMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyMessage& operator=(NotifyMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyMessage* internal_default_instance() {
    return reinterpret_cast<const NotifyMessage*>(
               &_NotifyMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(NotifyMessage& a, NotifyMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotifyMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotifyMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotifyMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotifyMessage& from) {
    NotifyMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sylar.ns.NotifyMessage";
  }
  protected:
  explicit NotifyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDelsFieldNumber = 1,
    kUpdatesFieldNumber = 2,
  };
  // repeated .sylar.ns.NodeInfo dels = 1;
  int dels_size() const;
  private:
  int _internal_dels_size() const;
  public:
  void clear_dels();
  ::sylar::ns::NodeInfo* mutable_dels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
      mutable_dels();
  private:
  const ::sylar::ns::NodeInfo& _internal_dels(int index) const;
  ::sylar::ns::NodeInfo* _internal_add_dels();
  public:
  const ::sylar::ns::NodeInfo& dels(int index) const;
  ::sylar::ns::NodeInfo* add_dels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
      dels() const;

  // repeated .sylar.ns.NodeInfo updates = 2;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::sylar::ns::NodeInfo* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
      mutable_updates();
  private:
  const ::sylar::ns::NodeInfo& _internal_updates(int index) const;
  ::sylar::ns::NodeInfo* _internal_add_updates();
  public:
  const ::sylar::ns::NodeInfo& updates(int index) const;
  ::sylar::ns::NodeInfo* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
      updates() const;

  // @@protoc_insertion_point(class_scope:sylar.ns.NotifyMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo > dels_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo > updates_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sylar_2fns_2fns_5fprotobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// optional string ip = 1;
inline bool Node::_internal_has_ip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Node::has_ip() const {
  return _internal_has_ip();
}
inline void Node::clear_ip() {
  _impl_.ip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Node::ip() const {
  // @@protoc_insertion_point(field_get:sylar.ns.Node.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_ip(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sylar.ns.Node.ip)
}
inline std::string* Node::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:sylar.ns.Node.ip)
  return _s;
}
inline const std::string& Node::_internal_ip() const {
  return _impl_.ip_.Get();
}
inline void Node::_internal_set_ip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ip_.Set(value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_ip() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.ip_.Mutable(GetArenaForAllocation());
}
inline std::string* Node::release_ip() {
  // @@protoc_insertion_point(field_release:sylar.ns.Node.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.ip_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Node::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ip_.SetAllocated(ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_.IsDefault()) {
    _impl_.ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sylar.ns.Node.ip)
}

// optional uint32 port = 2;
inline bool Node::_internal_has_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Node::has_port() const {
  return _internal_has_port();
}
inline void Node::clear_port() {
  _impl_.port_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Node::_internal_port() const {
  return _impl_.port_;
}
inline uint32_t Node::port() const {
  // @@protoc_insertion_point(field_get:sylar.ns.Node.port)
  return _internal_port();
}
inline void Node::_internal_set_port(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.port_ = value;
}
inline void Node::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:sylar.ns.Node.port)
}

// optional uint32 weight = 3;
inline bool Node::_internal_has_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Node::has_weight() const {
  return _internal_has_weight();
}
inline void Node::clear_weight() {
  _impl_.weight_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Node::_internal_weight() const {
  return _impl_.weight_;
}
inline uint32_t Node::weight() const {
  // @@protoc_insertion_point(field_get:sylar.ns.Node.weight)
  return _internal_weight();
}
inline void Node::_internal_set_weight(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.weight_ = value;
}
inline void Node::set_weight(uint32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:sylar.ns.Node.weight)
}

// -------------------------------------------------------------------

// RegisterInfo

// optional string domain = 1;
inline bool RegisterInfo::_internal_has_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterInfo::has_domain() const {
  return _internal_has_domain();
}
inline void RegisterInfo::clear_domain() {
  _impl_.domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegisterInfo::domain() const {
  // @@protoc_insertion_point(field_get:sylar.ns.RegisterInfo.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterInfo::set_domain(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sylar.ns.RegisterInfo.domain)
}
inline std::string* RegisterInfo::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:sylar.ns.RegisterInfo.domain)
  return _s;
}
inline const std::string& RegisterInfo::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void RegisterInfo::_internal_set_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterInfo::_internal_mutable_domain() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterInfo::release_domain() {
  // @@protoc_insertion_point(field_release:sylar.ns.RegisterInfo.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegisterInfo::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sylar.ns.RegisterInfo.domain)
}

// repeated uint32 cmds = 2;
inline int RegisterInfo::_internal_cmds_size() const {
  return _impl_.cmds_.size();
}
inline int RegisterInfo::cmds_size() const {
  return _internal_cmds_size();
}
inline void RegisterInfo::clear_cmds() {
  _impl_.cmds_.Clear();
}
inline uint32_t RegisterInfo::_internal_cmds(int index) const {
  return _impl_.cmds_.Get(index);
}
inline uint32_t RegisterInfo::cmds(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.RegisterInfo.cmds)
  return _internal_cmds(index);
}
inline void RegisterInfo::set_cmds(int index, uint32_t value) {
  _impl_.cmds_.Set(index, value);
  // @@protoc_insertion_point(field_set:sylar.ns.RegisterInfo.cmds)
}
inline void RegisterInfo::_internal_add_cmds(uint32_t value) {
  _impl_.cmds_.Add(value);
}
inline void RegisterInfo::add_cmds(uint32_t value) {
  _internal_add_cmds(value);
  // @@protoc_insertion_point(field_add:sylar.ns.RegisterInfo.cmds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RegisterInfo::_internal_cmds() const {
  return _impl_.cmds_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
RegisterInfo::cmds() const {
  // @@protoc_insertion_point(field_list:sylar.ns.RegisterInfo.cmds)
  return _internal_cmds();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RegisterInfo::_internal_mutable_cmds() {
  return &_impl_.cmds_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
RegisterInfo::mutable_cmds() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.RegisterInfo.cmds)
  return _internal_mutable_cmds();
}

// optional .sylar.ns.Node node = 3;
inline bool RegisterInfo::_internal_has_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.node_ != nullptr);
  return value;
}
inline bool RegisterInfo::has_node() const {
  return _internal_has_node();
}
inline void RegisterInfo::clear_node() {
  if (_impl_.node_ != nullptr) _impl_.node_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::sylar::ns::Node& RegisterInfo::_internal_node() const {
  const ::sylar::ns::Node* p = _impl_.node_;
  return p != nullptr ? *p : reinterpret_cast<const ::sylar::ns::Node&>(
      ::sylar::ns::_Node_default_instance_);
}
inline const ::sylar::ns::Node& RegisterInfo::node() const {
  // @@protoc_insertion_point(field_get:sylar.ns.RegisterInfo.node)
  return _internal_node();
}
inline void RegisterInfo::unsafe_arena_set_allocated_node(
    ::sylar::ns::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_);
  }
  _impl_.node_ = node;
  if (node) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sylar.ns.RegisterInfo.node)
}
inline ::sylar::ns::Node* RegisterInfo::release_node() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sylar::ns::Node* temp = _impl_.node_;
  _impl_.node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sylar::ns::Node* RegisterInfo::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:sylar.ns.RegisterInfo.node)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::sylar::ns::Node* temp = _impl_.node_;
  _impl_.node_ = nullptr;
  return temp;
}
inline ::sylar::ns::Node* RegisterInfo::_internal_mutable_node() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.node_ == nullptr) {
    auto* p = CreateMaybeMessage<::sylar::ns::Node>(GetArenaForAllocation());
    _impl_.node_ = p;
  }
  return _impl_.node_;
}
inline ::sylar::ns::Node* RegisterInfo::mutable_node() {
  ::sylar::ns::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:sylar.ns.RegisterInfo.node)
  return _msg;
}
inline void RegisterInfo::set_allocated_node(::sylar::ns::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.node_ = node;
  // @@protoc_insertion_point(field_set_allocated:sylar.ns.RegisterInfo.node)
}

// -------------------------------------------------------------------

// RegisterRequest

// repeated .sylar.ns.RegisterInfo infos = 1;
inline int RegisterRequest::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int RegisterRequest::infos_size() const {
  return _internal_infos_size();
}
inline void RegisterRequest::clear_infos() {
  _impl_.infos_.Clear();
}
inline ::sylar::ns::RegisterInfo* RegisterRequest::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.RegisterRequest.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::RegisterInfo >*
RegisterRequest::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.RegisterRequest.infos)
  return &_impl_.infos_;
}
inline const ::sylar::ns::RegisterInfo& RegisterRequest::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::sylar::ns::RegisterInfo& RegisterRequest::infos(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.RegisterRequest.infos)
  return _internal_infos(index);
}
inline ::sylar::ns::RegisterInfo* RegisterRequest::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::sylar::ns::RegisterInfo* RegisterRequest::add_infos() {
  ::sylar::ns::RegisterInfo* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:sylar.ns.RegisterRequest.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::RegisterInfo >&
RegisterRequest::infos() const {
  // @@protoc_insertion_point(field_list:sylar.ns.RegisterRequest.infos)
  return _impl_.infos_;
}

// -------------------------------------------------------------------

// QueryRequest

// repeated string domains = 1;
inline int QueryRequest::_internal_domains_size() const {
  return _impl_.domains_.size();
}
inline int QueryRequest::domains_size() const {
  return _internal_domains_size();
}
inline void QueryRequest::clear_domains() {
  _impl_.domains_.Clear();
}
inline std::string* QueryRequest::add_domains() {
  std::string* _s = _internal_add_domains();
  // @@protoc_insertion_point(field_add_mutable:sylar.ns.QueryRequest.domains)
  return _s;
}
inline const std::string& QueryRequest::_internal_domains(int index) const {
  return _impl_.domains_.Get(index);
}
inline const std::string& QueryRequest::domains(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.QueryRequest.domains)
  return _internal_domains(index);
}
inline std::string* QueryRequest::mutable_domains(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.QueryRequest.domains)
  return _impl_.domains_.Mutable(index);
}
inline void QueryRequest::set_domains(int index, const std::string& value) {
  _impl_.domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:sylar.ns.QueryRequest.domains)
}
inline void QueryRequest::set_domains(int index, std::string&& value) {
  _impl_.domains_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:sylar.ns.QueryRequest.domains)
}
inline void QueryRequest::set_domains(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.domains_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sylar.ns.QueryRequest.domains)
}
inline void QueryRequest::set_domains(int index, const char* value, size_t size) {
  _impl_.domains_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sylar.ns.QueryRequest.domains)
}
inline std::string* QueryRequest::_internal_add_domains() {
  return _impl_.domains_.Add();
}
inline void QueryRequest::add_domains(const std::string& value) {
  _impl_.domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sylar.ns.QueryRequest.domains)
}
inline void QueryRequest::add_domains(std::string&& value) {
  _impl_.domains_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sylar.ns.QueryRequest.domains)
}
inline void QueryRequest::add_domains(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.domains_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sylar.ns.QueryRequest.domains)
}
inline void QueryRequest::add_domains(const char* value, size_t size) {
  _impl_.domains_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sylar.ns.QueryRequest.domains)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryRequest::domains() const {
  // @@protoc_insertion_point(field_list:sylar.ns.QueryRequest.domains)
  return _impl_.domains_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryRequest::mutable_domains() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.QueryRequest.domains)
  return &_impl_.domains_;
}

// -------------------------------------------------------------------

// NodeInfo

// optional string domain = 1;
inline bool NodeInfo::_internal_has_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NodeInfo::has_domain() const {
  return _internal_has_domain();
}
inline void NodeInfo::clear_domain() {
  _impl_.domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NodeInfo::domain() const {
  // @@protoc_insertion_point(field_get:sylar.ns.NodeInfo.domain)
  return _internal_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NodeInfo::set_domain(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sylar.ns.NodeInfo.domain)
}
inline std::string* NodeInfo::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:sylar.ns.NodeInfo.domain)
  return _s;
}
inline const std::string& NodeInfo::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void NodeInfo::_internal_set_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* NodeInfo::_internal_mutable_domain() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.domain_.Mutable(GetArenaForAllocation());
}
inline std::string* NodeInfo::release_domain() {
  // @@protoc_insertion_point(field_release:sylar.ns.NodeInfo.domain)
  if (!_internal_has_domain()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NodeInfo::set_allocated_domain(std::string* domain) {
  if (domain != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.domain_.SetAllocated(domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.domain_.IsDefault()) {
    _impl_.domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sylar.ns.NodeInfo.domain)
}

// optional uint32 cmd = 2;
inline bool NodeInfo::_internal_has_cmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NodeInfo::has_cmd() const {
  return _internal_has_cmd();
}
inline void NodeInfo::clear_cmd() {
  _impl_.cmd_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t NodeInfo::_internal_cmd() const {
  return _impl_.cmd_;
}
inline uint32_t NodeInfo::cmd() const {
  // @@protoc_insertion_point(field_get:sylar.ns.NodeInfo.cmd)
  return _internal_cmd();
}
inline void NodeInfo::_internal_set_cmd(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cmd_ = value;
}
inline void NodeInfo::set_cmd(uint32_t value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:sylar.ns.NodeInfo.cmd)
}

// repeated .sylar.ns.Node nodes = 3;
inline int NodeInfo::_internal_nodes_size() const {
  return _impl_.nodes_.size();
}
inline int NodeInfo::nodes_size() const {
  return _internal_nodes_size();
}
inline void NodeInfo::clear_nodes() {
  _impl_.nodes_.Clear();
}
inline ::sylar::ns::Node* NodeInfo::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.NodeInfo.nodes)
  return _impl_.nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::Node >*
NodeInfo::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.NodeInfo.nodes)
  return &_impl_.nodes_;
}
inline const ::sylar::ns::Node& NodeInfo::_internal_nodes(int index) const {
  return _impl_.nodes_.Get(index);
}
inline const ::sylar::ns::Node& NodeInfo::nodes(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.NodeInfo.nodes)
  return _internal_nodes(index);
}
inline ::sylar::ns::Node* NodeInfo::_internal_add_nodes() {
  return _impl_.nodes_.Add();
}
inline ::sylar::ns::Node* NodeInfo::add_nodes() {
  ::sylar::ns::Node* _add = _internal_add_nodes();
  // @@protoc_insertion_point(field_add:sylar.ns.NodeInfo.nodes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::Node >&
NodeInfo::nodes() const {
  // @@protoc_insertion_point(field_list:sylar.ns.NodeInfo.nodes)
  return _impl_.nodes_;
}

// -------------------------------------------------------------------

// QueryResponse

// repeated .sylar.ns.NodeInfo infos = 1;
inline int QueryResponse::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int QueryResponse::infos_size() const {
  return _internal_infos_size();
}
inline void QueryResponse::clear_infos() {
  _impl_.infos_.Clear();
}
inline ::sylar::ns::NodeInfo* QueryResponse::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.QueryResponse.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
QueryResponse::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.QueryResponse.infos)
  return &_impl_.infos_;
}
inline const ::sylar::ns::NodeInfo& QueryResponse::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::sylar::ns::NodeInfo& QueryResponse::infos(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.QueryResponse.infos)
  return _internal_infos(index);
}
inline ::sylar::ns::NodeInfo* QueryResponse::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::sylar::ns::NodeInfo* QueryResponse::add_infos() {
  ::sylar::ns::NodeInfo* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:sylar.ns.QueryResponse.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
QueryResponse::infos() const {
  // @@protoc_insertion_point(field_list:sylar.ns.QueryResponse.infos)
  return _impl_.infos_;
}

// -------------------------------------------------------------------

// NotifyMessage

// repeated .sylar.ns.NodeInfo dels = 1;
inline int NotifyMessage::_internal_dels_size() const {
  return _impl_.dels_.size();
}
inline int NotifyMessage::dels_size() const {
  return _internal_dels_size();
}
inline void NotifyMessage::clear_dels() {
  _impl_.dels_.Clear();
}
inline ::sylar::ns::NodeInfo* NotifyMessage::mutable_dels(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.NotifyMessage.dels)
  return _impl_.dels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
NotifyMessage::mutable_dels() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.NotifyMessage.dels)
  return &_impl_.dels_;
}
inline const ::sylar::ns::NodeInfo& NotifyMessage::_internal_dels(int index) const {
  return _impl_.dels_.Get(index);
}
inline const ::sylar::ns::NodeInfo& NotifyMessage::dels(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.NotifyMessage.dels)
  return _internal_dels(index);
}
inline ::sylar::ns::NodeInfo* NotifyMessage::_internal_add_dels() {
  return _impl_.dels_.Add();
}
inline ::sylar::ns::NodeInfo* NotifyMessage::add_dels() {
  ::sylar::ns::NodeInfo* _add = _internal_add_dels();
  // @@protoc_insertion_point(field_add:sylar.ns.NotifyMessage.dels)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
NotifyMessage::dels() const {
  // @@protoc_insertion_point(field_list:sylar.ns.NotifyMessage.dels)
  return _impl_.dels_;
}

// repeated .sylar.ns.NodeInfo updates = 2;
inline int NotifyMessage::_internal_updates_size() const {
  return _impl_.updates_.size();
}
inline int NotifyMessage::updates_size() const {
  return _internal_updates_size();
}
inline void NotifyMessage::clear_updates() {
  _impl_.updates_.Clear();
}
inline ::sylar::ns::NodeInfo* NotifyMessage::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:sylar.ns.NotifyMessage.updates)
  return _impl_.updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >*
NotifyMessage::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:sylar.ns.NotifyMessage.updates)
  return &_impl_.updates_;
}
inline const ::sylar::ns::NodeInfo& NotifyMessage::_internal_updates(int index) const {
  return _impl_.updates_.Get(index);
}
inline const ::sylar::ns::NodeInfo& NotifyMessage::updates(int index) const {
  // @@protoc_insertion_point(field_get:sylar.ns.NotifyMessage.updates)
  return _internal_updates(index);
}
inline ::sylar::ns::NodeInfo* NotifyMessage::_internal_add_updates() {
  return _impl_.updates_.Add();
}
inline ::sylar::ns::NodeInfo* NotifyMessage::add_updates() {
  ::sylar::ns::NodeInfo* _add = _internal_add_updates();
  // @@protoc_insertion_point(field_add:sylar.ns.NotifyMessage.updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sylar::ns::NodeInfo >&
NotifyMessage::updates() const {
  // @@protoc_insertion_point(field_list:sylar.ns.NotifyMessage.updates)
  return _impl_.updates_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ns
}  // namespace sylar

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sylar_2fns_2fns_5fprotobuf_2eproto
